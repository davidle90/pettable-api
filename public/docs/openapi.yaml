openapi: 3.0.3
info:
  title: 'Pettable API API Documentation'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://pettable-api.test'
tags:
  -
    name: Authentication
    description: ''
  -
    name: 'Managing Users'
    description: ''
paths:
  /api/login:
    post:
      summary: 'Log in a user'
      operationId: logInAUser
      description: 'This endpoint allows a user to log in with their email and password.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  token: eyJ0eXAiOiJKV1QiLCJh...
                  user:
                    id: 1
                    name: 'John Doe'
                properties:
                  token:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJh...
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email."
                  example: user@example.com
                  nullable: false
                password:
                  type: string
                  description: "The user's password."
                  example: secret
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/register:
    post:
      summary: Register
      operationId: register
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: b
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: zbailey@example.net
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 6 characters.'
                  example: '-0pBNvYgxw'
                  nullable: false
              required:
                - name
                - email
                - password
      security: []
  /api/logout:
    post:
      summary: Logout
      operationId: logout
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Authentication
      security: []
  /api/v1/users:
    get:
      summary: 'Get all users'
      operationId: getAllUsers
      description: ''
      parameters:
        -
          in: query
          name: sort
          description: 'Data field(s) to sort by. Separate multiple fields with commas. Denote descending sort with minus sign.'
          example: 'sort=title,-createdAt'
          required: false
          schema:
            type: string
            description: 'Data field(s) to sort by. Separate multiple fields with commas. Denote descending sort with minus sign.'
            example: 'sort=title,-createdAt'
            nullable: false
        -
          in: query
          name: 'filter[status]'
          description: 'Filter by status code: A, C, H, X.'
          example: null
          required: false
          schema:
            type: string
            description: 'Filter by status code: A, C, H, X.'
            example: null
            nullable: false
        -
          in: query
          name: 'filter[title]'
          description: 'Filter by title. Wildards are supported.'
          example: '*fix*'
          required: false
          schema:
            type: string
            description: 'Filter by title. Wildards are supported.'
            example: '*fix*'
            nullable: false
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Managing Users'
      security: []
    post:
      summary: 'Create user'
      operationId: createUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Managing Users'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        name:
                          type: string
                          description: ''
                          example: architecto
                          nullable: false
                        email:
                          type: string
                          description: 'Must be a valid email address.'
                          example: zbailey@example.net
                          nullable: false
                        isAdmin:
                          type: boolean
                          description: ''
                          example: false
                          nullable: false
                        password:
                          type: string
                          description: ''
                          example: '|]|{+-'
                          nullable: false
                      required:
                        - name
                        - email
                        - isAdmin
                        - password
      security: []
  '/api/v1/users/{id}':
    get:
      summary: 'Display user'
      operationId: displayUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Managing Users'
      security: []
    delete:
      summary: 'Delete user'
      operationId: deleteUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Managing Users'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: architecto
        required: true
        schema:
          type: string
  '/api/v1/users/{user_id}':
    patch:
      summary: 'Update user'
      operationId: updateUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Managing Users'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    attributes:
                      type: object
                      description: ''
                      example: []
                      nullable: false
                      properties:
                        name:
                          type: string
                          description: ''
                          example: architecto
                          nullable: false
                        password:
                          type: string
                          description: ''
                          example: '|]|{+-'
                          nullable: false
                        reference_id:
                          type: string
                          description: ''
                          example: null
                          nullable: false
      security: []
    parameters:
      -
        in: path
        name: user_id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
